/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class org_treetank_pagelayer_CryptoNativeImpl */

#ifndef _Included_org_treetank_pagelayer_CryptoNativeImpl
#define _Included_org_treetank_pagelayer_CryptoNativeImpl
#ifdef __cplusplus
extern "C" {
#endif
#undef org_treetank_pagelayer_CryptoNativeImpl_CORE_COUNT
#define org_treetank_pagelayer_CryptoNativeImpl_CORE_COUNT 15L
#undef org_treetank_pagelayer_CryptoNativeImpl_ERROR
#define org_treetank_pagelayer_CryptoNativeImpl_ERROR 0L
#undef org_treetank_pagelayer_CryptoNativeImpl_TT_WRITE_FRAGMENT
#define org_treetank_pagelayer_CryptoNativeImpl_TT_WRITE_FRAGMENT 8L
#undef org_treetank_pagelayer_CryptoNativeImpl_TT_READ_FRAGMENT
#define org_treetank_pagelayer_CryptoNativeImpl_TT_READ_FRAGMENT 9L
/* Inaccessible static: coreQueue */
/*
 * Class:     org_treetank_pagelayer_CryptoNativeImpl
 * Method:    syscall
 * Signature: (BBSLjava/nio/ByteBuffer;)S
 */
JNIEXPORT jshort JNICALL Java_org_treetank_pagelayer_CryptoNativeImpl_syscall
  (JNIEnv *, jobject, jbyte, jbyte, jshort, jobject);

#ifdef __cplusplus
}
#endif
#endif
/* Header for class org_treetank_utils_FastByteBuffer */

#ifndef _Included_org_treetank_utils_FastByteBuffer
#define _Included_org_treetank_utils_FastByteBuffer
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     org_treetank_utils_FastByteBuffer
 * Method:    get
 * Signature: (JI)B
 */
JNIEXPORT jbyte JNICALL Java_org_treetank_utils_FastByteBuffer_get
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_treetank_utils_FastByteBuffer
 * Method:    getInt
 * Signature: (JI)I
 */
JNIEXPORT jint JNICALL Java_org_treetank_utils_FastByteBuffer_getInt
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_treetank_utils_FastByteBuffer
 * Method:    getLong
 * Signature: (JI)J
 */
JNIEXPORT jlong JNICALL Java_org_treetank_utils_FastByteBuffer_getLong
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_treetank_utils_FastByteBuffer
 * Method:    getByteArray
 * Signature: (JI)[B
 */
JNIEXPORT jbyteArray JNICALL Java_org_treetank_utils_FastByteBuffer_getByteArray
  (JNIEnv *, jobject, jlong, jint);

/*
 * Class:     org_treetank_utils_FastByteBuffer
 * Method:    put
 * Signature: (JIB)V
 */
JNIEXPORT void JNICALL Java_org_treetank_utils_FastByteBuffer_put
  (JNIEnv *, jobject, jlong, jint, jbyte);

/*
 * Class:     org_treetank_utils_FastByteBuffer
 * Method:    putInt
 * Signature: (JII)V
 */
JNIEXPORT void JNICALL Java_org_treetank_utils_FastByteBuffer_putInt
  (JNIEnv *, jobject, jlong, jint, jint);

/*
 * Class:     org_treetank_utils_FastByteBuffer
 * Method:    putLong
 * Signature: (JIJ)V
 */
JNIEXPORT void JNICALL Java_org_treetank_utils_FastByteBuffer_putLong
  (JNIEnv *, jobject, jlong, jint, jlong);

/*
 * Class:     org_treetank_utils_FastByteBuffer
 * Method:    putByteArray
 * Signature: (JI[B)V
 */
JNIEXPORT void JNICALL Java_org_treetank_utils_FastByteBuffer_putByteArray
  (JNIEnv *, jobject, jlong, jint, jbyteArray);

/*
 * Class:     org_treetank_utils_FastByteBuffer
 * Method:    allocate
 * Signature: (I)J
 */
JNIEXPORT jlong JNICALL Java_org_treetank_utils_FastByteBuffer_allocate
  (JNIEnv *, jobject, jint);

/*
 * Class:     org_treetank_utils_FastByteBuffer
 * Method:    free
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_org_treetank_utils_FastByteBuffer_free
  (JNIEnv *, jobject, jlong);

#ifdef __cplusplus
}
#endif
#endif
