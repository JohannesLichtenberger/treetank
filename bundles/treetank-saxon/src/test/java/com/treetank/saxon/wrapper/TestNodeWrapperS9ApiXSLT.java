package com.treetank.saxon.wrapper;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

import junit.framework.TestCase;
import net.sf.saxon.s9api.Serializer;

import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import com.treetank.TestHelper;
import com.treetank.access.Database;
import com.treetank.api.IDatabase;
import com.treetank.api.ISession;
import com.treetank.api.IWriteTransaction;
import com.treetank.exception.TreetankException;
import com.treetank.saxon.evaluator.XSLTEvaluator;
import com.treetank.utils.DocumentCreater;

/**
 * Test XSLT S9Api.
 * 
 * @author johannes
 * 
 */
public final class TestNodeWrapperS9ApiXSLT {

	/** Treetank session on Treetank test document. */
	private transient static ISession sessionTest;

	@Before
	public void setUp() throws TreetankException {
		Database.truncateDatabase(TestHelper.PATHS.PATH1.getFile());
		final IDatabase database = Database.openDatabase(TestHelper.PATHS.PATH1
				.getFile());
		sessionTest = database.getSession();
		final IWriteTransaction wtx = sessionTest.beginWriteTransaction();
		DocumentCreater.create(wtx);
		wtx.commit();
		wtx.close();
	}

	@After
	public void tearDown() throws TreetankException {
		Database.forceCloseDatabase(TestHelper.PATHS.PATH1.getFile());
	}

	@Test
	@Ignore
	public void testA() throws IOException {
		final File stylesheet = new File("src" + File.separator + "test"
				+ File.separator + "resources" + File.separator + "styles"
				+ File.separator + "books.xsl");

		final File books = new File("src" + File.separator + "test"
				+ File.separator + "resources" + File.separator + "data"
				+ File.separator + "books.xml");

		final Serializer serializer = new XSLTEvaluator(sessionTest, books,
				stylesheet, new ByteArrayOutputStream()).call();

		// Check against books html file generated by S9APIExamples class.
		final BufferedReader in = new BufferedReader(new FileReader(new File(
				TestHelper.PATHS.PATH1.getFile(), "books1.html")));
		final StringBuilder sBuilder = new StringBuilder();
		for (String line = in.readLine(); line != null; line = in.readLine()) {
			sBuilder.append(line.trim());
		}
		in.close();

		TestCase
				.assertEquals(sBuilder.toString(), serializer.toString().trim());
	}
}
