package com.treetank.saxon.wrapper;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileReader;

import javax.xml.stream.XMLEventReader;
import javax.xml.transform.stream.StreamSource;

import junit.framework.TestCase;
import net.sf.saxon.s9api.Processor;
import net.sf.saxon.s9api.SaxonApiException;
import net.sf.saxon.s9api.Serializer;
import net.sf.saxon.s9api.XdmNode;
import net.sf.saxon.s9api.XsltCompiler;
import net.sf.saxon.s9api.XsltExecutable;
import net.sf.saxon.s9api.XsltTransformer;

import org.junit.After;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;

import com.treetank.TestHelper;
import com.treetank.access.Database;
import com.treetank.access.DatabaseConfiguration;
import com.treetank.api.IDatabase;
import com.treetank.api.ISession;
import com.treetank.api.IWriteTransaction;
import com.treetank.exception.TreetankException;
import com.treetank.saxon.evaluator.XSLTEvaluator;
import com.treetank.service.xml.XMLShredder;
import com.treetank.utils.DocumentCreater;

/**
 * Test XSLT S9Api.
 * 
 * @author johannes
 * 
 */
public final class TestNodeWrapperS9ApiXSLT {

  /** Treetank session on Treetank test document. */
  private transient static ISession sessionTest;

  @Before
  public void setUp() throws TreetankException {
    Database.truncateDatabase(TestHelper.PATHS.PATH1.getFile());
    final IDatabase database =
        Database.openDatabase(TestHelper.PATHS.PATH1.getFile());
    sessionTest = database.getSession();
    final IWriteTransaction wtx = sessionTest.beginWriteTransaction();
    DocumentCreater.create(wtx);
    wtx.commit();
    wtx.close();
  }

  @After
  public void tearDown() throws TreetankException {
    Database.forceCloseDatabase(TestHelper.PATHS.PATH1.getFile());
  }

  @Test
  @Ignore
  public void testA() throws Exception {
    final File stylesheet =
        new File("src"
            + File.separator
            + "test"
            + File.separator
            + "resources"
            + File.separator
            + "styles"
            + File.separator
            + "books.xsl");

    final File books =
        new File("src"
            + File.separator
            + "test"
            + File.separator
            + "resources"
            + File.separator
            + "data"
            + File.separator
            + "books.xml");

    saxonTransform(books, stylesheet);

    Database.truncateDatabase(TestHelper.PATHS.PATH2.getFile());
    Database.createDatabase(new DatabaseConfiguration(TestHelper.PATHS.PATH1
        .getFile()));

    final IDatabase database =
        Database.openDatabase(TestHelper.PATHS.PATH2.getFile());
    final ISession sessionBooks = database.getSession();
    final IWriteTransaction mWTX = sessionBooks.beginWriteTransaction();
    final XMLEventReader reader = XMLShredder.createReader(books);
    final XMLShredder shredder = new XMLShredder(mWTX, reader, true);
    shredder.call();
    mWTX.close();

    final Serializer serializer =
        new XSLTEvaluator(
            sessionBooks,
            books,
            stylesheet,
            new ByteArrayOutputStream()).call();

    // Check against books html file generated by S9APIExamples class.
    final BufferedReader in =
        new BufferedReader(new FileReader(new File(TestHelper.PATHS.PATH1
            .getFile(), "books1.html")));
    final StringBuilder sBuilder = new StringBuilder();
    for (String line = in.readLine(); line != null; line = in.readLine()) {
      sBuilder.append(line+"\n");
    }
    
    // Remove last newline.
    sBuilder.replace(sBuilder.length()-1, sBuilder.length(), "");
    
    in.close();

    TestCase.assertEquals(sBuilder.toString(), serializer
        .getOutputDestination()
        .toString());
  }

  /**
   * Transform source document with the given stylesheet.
   * 
   * @param xml
   *            Source xml file.
   * @param stylesheet
   *            Stylesheet to transform sourc xml file.
   * @throws SaxonApiException
   *            Exception from Saxon in case anything goes wrong.
   */
  @Ignore("Not a test, utility method only")
  public void saxonTransform(final File xml, final File stylesheet)
      throws SaxonApiException {
    final Processor proc = new Processor(false);
    final XsltCompiler comp = proc.newXsltCompiler();
    final XsltExecutable exp = comp.compile(new StreamSource(stylesheet));
    final XdmNode source =
        proc.newDocumentBuilder().build(new StreamSource(xml));
    final Serializer out = new Serializer();
    out.setOutputProperty(Serializer.Property.METHOD, "html");
    out.setOutputProperty(Serializer.Property.INDENT, "yes");
    out
        .setOutputFile(new File(TestHelper.PATHS.PATH1.getFile(), "books1.html"));
    final XsltTransformer trans = exp.load();
    trans.setInitialContextNode(source);
    trans.setDestination(out);
    trans.transform();
  }
}
